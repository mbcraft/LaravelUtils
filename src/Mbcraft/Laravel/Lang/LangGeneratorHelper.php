<?php

namespace Mbcraft\Laravel\Lang;

use Mbcraft\Laravel\GeneratorUtils;
/**
 * Questa classe contiene metodi per facilitare la generazione degli helper per
 * le localizzazioni.
 */
class LangGeneratorHelper {


    /**
     * Ritorna i valori passati come parametri a un metodo __callStatic o __call
     * da usare come valore per il LangHelper.
     * 
     * @param type $key
     * @param type $args
     */
    public static function getValueFromArgs($key, $args) {
        $result = array();
        $i = 0;
        while ($i < count($args) && $i < 2) {
            $result[] = $args[$i++];
        }

        while ($i < 2) {
            $result[] = "* VALUE TO SET FOR : " . $key . " *";
        }
    }    

    /**
     * Importa le chiavi nello spazio della classe aggiungendo underscore per non
     * generare collisioni.
     * 
     * @param array $flattened Le chiavi originarie (su un solo livello).
     * @param array $to_import Le chiavi da importare (su un solo livello) coi rispettivi valori.
     * @return array L'array risultante dall'import.
     */
    public static function importKeys($flattened,$to_import,$add_levels = 0) {
        
        foreach ($to_import as $k => $v) {
            $imp_key = $k;
            while (isset($flattened[$imp_key])) {
                $imp_key = "|".$imp_key;    //usato per evitare conflitti su nomi di chiavi ripetuti
            }
            $my_val = clone $v;
            $my_val->level += $add_levels;  
            $flattened[$imp_key] = $my_val;
        }
        
        return $flattened;
    }
    /**
     * Ritorna le chiavi di un array senza sottoarray.
     * 
     * @param array $values L'elenco delle chiavi
     * @return array Le chiavi senza sottoarray con valori KeyValue
     */
    public static function flattenKeys($values) {
        $collected_keys = [];

        foreach ($values as $k => $v) {
            if (!is_array($v)) {
                $collected_keys[$k] = new KeyValue($v);
            } else {
                $found = self::flattenKeys($v);
                foreach ($found as $fk => $v) {
                    $collected_keys[$k . "." . $fk] = $v; //già KeyValue
                }
                if ($k==="values") {
                    $collected_keys[$k] = new KeyValue("*");
                }
            }
        }

        return $collected_keys;
    }
    
    /**
     * Genera la classe helper per la traduzione.
     * 
     * @param \Mbcraft\Piol\Dir $save_dir La directory in cui salvare la classe.
     * @param string $namespace Il namespace da utilizzare.
     * @param string $key_prefix Il prefisso da utilizzare per le chiavi.
     * @param string $class_name Il nome della classe.
     * @param array $values I valori
     */
    public static function createHelperClass($save_dir,$namespace,$class_name,$key_prefix_parts,$lang_data) {
        $f = $save_dir->newFile($class_name.".php");
        $f->setContent(self::getLangFileContent($namespace, $class_name, $key_prefix_parts ,$lang_data));
    }
    
    /**
     * Ritorna il codice della classe helper php.
     * 
     * @param type $namespace
     * @param type $class_name
     * @param type $key_prefix
     * @param type $values
     * @return type
     */
    private static function getLangFileContent($namespace,$class_name, $key_prefix_parts,$lang_data) {
        $content = self::getClassOpen($namespace, $class_name, $key_prefix_parts, $lang_data);
        $content.= self::getClassContent($key_prefix_parts ,$lang_data);
        $content.= self::getClassClose();
        return $content;
    }
    
    /**
     * Ritorna il codice della parte iniziale della classe helper php.
     * 
     * @param type $namespace
     * @param type $class_name
     * @param type $key_prefix
     * @param type $values
     * @return type
     */
    private static function getClassOpen($namespace,$class_name,$key_prefix_parts,$lang_data) {        
                
        $result =<<<TEXT
<?php
                
namespace $namespace;
                
use Mbcraft\Laravel\GeneratorUtils;

/**
This class is generated by artisan lang:regenerate_helpers.
Manually editing is strongly discouraged.
*/
                
class $class_name {
                                
    public static function __callStatic(\$name,\$args) {
        \$key = GeneratorUtils::getKeyFromMethodName(\$name,\$args);
        
        return "No value found for key : ".\$key." .";
    }
   
    public function __call(\$name,\$args) {
    
        \$to_eval = "";
        foreach (\$args as \$k => \$arg) {
            \$param = \$k;
            \$\$param = \$arg;
            \$to_eval.= \$k.",";
        }
        \$to_eval = substr(\$to_eval,0,strlen(\$to_eval)-2);
        return eval('return self::'.\$name.'('.\$to_eval.');');
    }
                
    private static function __values(\$key,\$args) {
        if (count(\$args)==0) {
            return trans(\$key);
        } else {
            return trans(\$key.'.'.\$args[0]);
        }
    }
                
TEXT;
        return $result;
    }
    
    private static function getKeyForLocalization($key)
    {
        return str_replace("|","",$key);
    }
    
    /**
     * Returns the classic implementation for lang getter.
     * 
     * @param string $key_prefix
     * @param string $key
     * @return string
     */
    private static function getClassicClassMethod($key_prefix,$key) {
                
        $method_name = GeneratorUtils::getMethodNameFromKey($key);
        $final_key = $key_prefix.".".self::getKeyForLocalization($key);
        $exported_key = var_export($final_key, true);
        
        $result = <<<TEXT
                
    public static function $method_name() {
        return trans($exported_key);
    } 
                                
TEXT;
        return $result;
    }
    
    private static function getValuesClassMethod($key_prefix,$key) {
        $method_name = GeneratorUtils::getMethodNameFromKey($key);
        $final_key = $key_prefix.".".self::getKeyForLocalization($key);
        
        $result = <<<TEXT
        
    public static function $method_name() {
        return self::__values('$final_key',func_get_args());
    }
                
TEXT;
        return $result;
    }
    
    /**
     * Ritorna il codice del metodo della classe helper php per una singola chiave.
     * 
     * @param string $key_prefix I prefissi (cartelle) in cui è presente la chiave.
     * @param string $key La chiave che identifica la traduzione.
     * @return string Il codice php del metodo della classe.
     */
    private static  function getClassMethod($key_prefix,$key) {
        
        if (strpos($key, ".values")===(strlen($key)-strlen(".values"))) {
            return self::getValuesClassMethod($key_prefix, $key);
        } else {
            return self::getClassicClassMethod($key_prefix, $key);
        }
            
    }
    
    /**
     * 
     * Ritorna il codice dei metodi della classe helper php.
     * 
     * @param type $key_prefix
     * @param type $values
     * @return type
     * 
     */
    private static  function getClassContent($key_prefix_parts,$lang_data) {
        $content = "";

        foreach ($lang_data as $k => $v) {
            $parts = [];
            for ($i=$v->level;$i<count($key_prefix_parts);$i++)
                $parts[] = $key_prefix_parts[$i];
            $content.= self::getClassMethod(join('/',$parts),$k);
        }
        
        return $content;
    }
    
    /**
     * Ritorna il codice di chiusura della classe helper php.
     * 
     * @return type
     */
    private static  function getClassClose() {
        $result=<<<TEXT

}

TEXT;
        return $result;
    }
    


}
